#include <iostream>
#include <queue>
#include <stdlib.h>
#include <stdio.h>
#include <algorithm>
#include <string.h>

using namespace std;
//
vector<int> arrV[10001];
vector<int> dfs;
vector<int> bfs;
bool visit[1001];

void DFS(int v);
void BFS(int v);
int main()
{
	int N, M, V;
	int front = 0, back = 0;

	cin >> N >> M >> V;

	for (int i = 1; i <= M; i++)
	{
		cin >> front >> back;
		arrV[front].push_back(back);
		arrV[back].push_back(front);
	}
	for (int i = 1 ; i <= N; i++)
	{
		sort(arrV[i].begin(), arrV[i].end());
	}

	DFS(V);
	memset(visit, 0, sizeof(visit));
	BFS(V);

	for (int i = 0; i < dfs.size(); i++)
	{
		cout << dfs[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < bfs.size(); i++)
	{
		cout << bfs[i] << " ";
	}

	return 0;
}


void DFS(int v)
{
	dfs.push_back(v);
	visit[v] = true;

	for (int i = 0; i < arrV[v].size(); i++)
	{
		if (!visit[arrV[v][i]])
		{
			DFS(arrV[v][i]);
		}
	}
}
void BFS(int v)
{
	queue<int> q;
	q.push(v);
	visit[v] = true;
	while (!q.empty())
	{
		int a = q.front();
		bfs.push_back(a);
		q.pop();
		for (int i = 0; i < arrV[a].size(); i++)
		{
			if (!visit[arrV[a][i]])
			{
				q.push(arrV[a][i]);
				visit[arrV[a][i]] = true;
			}
		}
	}

}
